#pragma once
#include "Settings/ParametersOsci.h"


#define SHIFT_IN_MEMORY     DisplayOsci::PainterData::FirstPointOnScreen()


struct DisplayOsci
{
    static void Update();

    void DrawScaleLine(int x, bool forTrigLev);
    /// Установить признак того, что дисплей нуждается в перерисовке
    static void SetFlagRedraw();

    struct HiPart
    {
        static void Draw();
    private:
        /// Нарисовать правую часть - синхронизация и режим работы
        static void DrawRightPart(int x0, int y0);
    };

    struct BottomPart
    {
        static void Draw(int x, int y);
    };

    struct Accumulator
    {
        /// Эту функцию нужно вызывать после каждой отрисовки сигналов
        static void NextFrame();
        /// Сброс информации
        static void Reset();
    };

    struct PainterData
    {
        static void DrawData();
        /// Индекс первой точки, выводимой поверх сетки
        static int FirstPointOnScreen();
        /// Возвращает адрес первой и последней точки на экране в координатах экрана
        static BitSet64 PointsOnDisplay();
        /// \brief Возращает адрес первой и последней точки в координатах экрана
        static BitSet64 BytesOnDisplay();
        /// Эту функцию надо вызывать при переключении TPos для перерасчёта смещения первого выводимого байта относительно левого края экрана
        static void ChangeTPos();
    private:
        /// Нарисовать актуальные данные - соответствующие текущим установкам
        static void DrawCurrent();
        /// Нарисовать данные из ОЗУ
        static void DrawRAM();
        /// Нарисовать данные из ППЗУ
        static void DrawROM();

        static void DrawChannel(Chan::E ch);

        static void DrawModeLines(Chan::E ch, int left, int center, const uint8 *data, float scale);

        static void DrawModeLinesPeakDetOn(int center, const uint8 *data, float scale, int x);

        static void DrawModeLinesPeakDetOff(int center, const uint8 *data, float scale, int x);

        static void DrawModePoints(Chan::E ch, int left, int center, const uint8 *data, float scale);

        static void DrawModePointsPeakDetOn(int center, const uint8 *data, float scale, int x);

        static void DrawModePointsPeakDetOff(int center, const uint8 *data, float scale, int x);
        /// Нарисовать спектр
        static void DrawSpectrum();

        static void DrawSpectrum(const uint8 *dataIn, uint numPoints, Chan::E ch);

        static void DrawSpectrumChannel(const float *spectrum, Color color);

        static void WriteParametersFFT(Chan::E ch, float freq0, float density0, float freq1, float density1);
    };

    struct MemoryWindow
    {
        static void Draw();

        static int X();

        static int Y();

        static int Width();

        static int Height();
    };
};
