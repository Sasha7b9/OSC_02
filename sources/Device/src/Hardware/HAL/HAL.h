#pragma once
#include "defines.h"
#include "Data/DataSettings.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define ERROR_HANDLER()                             ::HAL::ErrorHandler(__FILE__, __LINE__)


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Hardware
{
    class Clock;
    class Battery;
    class ADC1_;
    class Timer;
}

namespace Multimeter
{
    class USART3_;
}

namespace FPGA
{
    class ADC3_;
}

namespace Beeper
{
    class DAC_;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace HAL
{
    void ErrorHandler(const char *, int);

    void Delay(uint timeMS);

    uint TimeMS();

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class RTC_
    {
    friend class Hardware::Clock;
    private:
        static void Init();
        static PackedTime GetPackedTime();
        static bool SetTimeAndData(int8 day, int8 month, int8 year, int8 hours, int8 minutes, int8 seconds);
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class ADC1_
    {
    friend class Hardware::Battery;
    friend class Hardware::ADC1_;
    private:
        static void Init();

        static void SetActiveChannel2();

        static void SetActiveChannel9();

        static uint ReadValue();
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class ADC3_
    {
    friend class FPGA::ADC3_;
    private:
        static void Init();
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class USART3_
    {
    friend class Multimeter::USART3_;
    private:
        static void Init(pFuncVV recvCallback);

        static void Transmit(void *buffer, uint size, uint timeout);

        static void StartReceiveIT(void *buffer, uint size);
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class DAC_
    {
    friend class Beeper::DAC_;
    private:
        static void Init();

        static void StartDMA(void *points, uint numPoints);

        static void StopDMA();

        static void ConfigTIM7(uint16 prescaler, uint16 period);
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TIM2_
    {
    friend class Hardware::Timer;
    private:
        static void Init(uint prescaler, uint period);

        static void DeInit();

        static void Start();

        static void Stop();

        static uint TimeUS();

        static uint TimeTicks();
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TIM3_
    {
    public:
        static void Init(uint prescaler, uint period);

        static void DeInit();

        static void Start();

        static void Stop();

        static void EnableIRQ(uint mainPriority, uint subPriority);

        static void DisableIRQ();

        static void StartIT(uint period);

        static void StopIT();
    };
}
