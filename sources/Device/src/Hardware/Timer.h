#pragma once

#define START_MULTI_MEASUREMENT() Timer::StartMultiMeasurement()
#define PAUSE_ON_TICKS(ticks)     Timer::PauseOnTicks(ticks)
#define PAUSE_ON_MS(ms)           Timer::PauseOnTime(ms)


/// Количество тиков, прошедших с момента последнего вызова функции Timer_StartMultiMeasurement(). Не более (1 << 32)
 /// В одной секунде 120.000.000 тиков для С8-53 и 90.000.000 тиков для С8-54.
 /// Максимальный отрезок времени, который можно отсчитать с её помощью - 35 сек.
#define TIME_TICKS Timer::TimeTicks()
#define TIME_US    Timer::TimeUS()
#define TIME_MS    Timer::TimeMS()


namespace Timer
{
    struct Type
    {
        enum E
        {
            ShowLevelTrigLev,       ///< Нужно устанавливать, когда изменяется положение ручки уровня синхронизации
            FlashDisplay,           ///< Таймер для мерцающих участков экрана чёрно-белого дисплея.
            ShowMessages,           ///< Таймер для засекания время показа информационных и предупреждающих сообщений.
            MenuAutoHide,           ///< Таймер для отсчёта времени скрывания меню.
            RShiftMarkersAutoHide,  ///< Таймер для отсчёта времени скрывания дополнительных боковых меток.
            StopSound,              ///< Выключить звук
            StrNaviAutoHide,        ///< Прятать строку навигации меню
            Display,                ///< Таймер на ручную отрисовку экрана
            RemoveAddFunction,      ///< Таймер на удаление дополнительной функции отрисовки
            USB,                    ///<
            Temp,
            Number
        };
    };


    void Init();

    void DeInit();
    /// Назначает таймеру timer функцию и время срабатывания
    void Set(Timer::Type::E type, pFuncVV func, uint dTms);

    void SetAndStartOnce(Timer::Type::E type, pFuncVV func, uint dTms);

    void SetAndEnable(Timer::Type::E type, pFuncVV func, uint dTms);

    void StartOnce(Timer::Type::E type);

    void Enable(Timer::Type::E type);

    void Disable(Timer::Type::E type);

    bool IsRun(Timer::Type::E type);

    void PauseOnTime(uint timeMS);

    void PauseOnTicks(uint numTicks);
    /// Запускает счётчик для измерения малых отрезков времени
    void StartMultiMeasurement();
    /// Ожидать определённое число элементарных операция в цилке for
    void PauseOnOPS(uint ops);

    bool IsBusy();
    /// Возвращает количество микросекунд, прошедших с момента последнего вызова StartMultiMeasurement()
    uint TimeUS();
    /// Возвращает количество тиков, прошедших с момента последнего вызова StartMultiMeasurement();
    uint TimeTicks();
    /// Возвращает количество миллисекунд, прошедших с момента старта программы
    uint TimeMS();
    /// Устанавливает стартовую точку логгирования. Далее вызовы Timer_LogPoint засекают временные интервалы от это точки
    void StartLogging();

    uint LogPointUS(char *name);

    uint LogPointMS(char *name);
    /// Служебная функция. Вызывается строго из прерывания
    void ElapsedCallback();
}
