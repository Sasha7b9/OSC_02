#include "stdafx.h"
#ifndef WIN32
#include <stm32f4xx.h>
#include "defines.h"
#include "debug.h"
#include "log.h"
#include "Hardware/Timer.h"
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static uint timeStart;
static uint timeCounter;
static uint timeStartCounter;

/// Время старта профилировщика
static uint timeStartMS = 0;
/// Время предыдущей точки профилировщика
static uint timePrevMS = 0;

const char *Debug::file = 0;
int   Debug::line = 0;
uint  Debug::size = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Debug::StartProfilingMS()
{
    timeStartMS = TIME_MS;
    timePrevMS = TIME_MS;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::PointProfilingMS(char * /*name*/)
{
    //LOG_WRITE("%s %d", TIME_MS - timePrevMS);
    timePrevMS = TIME_MS;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::StartProfiling()
{
    timeStart = TIME_US;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::PointProfiling(char *name)
{
    LOG_WRITE("%s %d", name, TIME_US - timeStart);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::ClearTimeCounter()
{
    timeCounter = 0;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::StartIncreaseCounter()
{
    timeStartCounter = TIME_US;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Debug::StopIncreaseCounter()
{
    timeCounter += (TIME_US - timeStartCounter);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint Debug::GetTimeCounterUS()
{
    return timeCounter;
}
