#pragma once
#include "Keyboard/Keyboard.h"
#include "Menu/MenuItems.h"
#include "Object.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @defgroup Menu
 *  @{
 *  @defgroup Pages
 *  @{
 *  @}
 */

#define PAGE_IS_MAIN                   (name == Page::Name::Main)
#define MENU_TEMP_ENABLE_STRING_NAVI() Menu::TemporaryEnableStrNavi()


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Menu
{
friend class Page;

public:
    /// Инициализация
    static void Init();

    static void ChangeStateFlashDrive();
    /// Функция должна вызываться в главном цикле.
    static void Update();
    /// Функция вызывается при нажатии, повторе и отпускании кнопки
    static void ButtonEvent(KeyEvent event);
    /// Установить время автоматического сокрытия меню в соответствии с установками.
    static void SetAutoHide(bool active);
    /// Показать/скрыть меню.
    static void Show(bool show);
    /// Возвращает true, если меню отображается на экране
    static bool IsShown();
    /// Функция временно включает отображение строки навигации меню, если задано настройками.
    static void TemporaryEnableStrNavi();
    /// Возвращает адрес открытого элемента меню
    static Control *OpenedItem();
    /// Если true - меню находится в дополнительном режиме.
    static bool IsMinimize();

    static Control *ItemUnderButton(Key::E button);

    static void SetItemUnderButton(Key::E button, Control *control);

    static Page::Name::E GetNameOpenedPage();

    static PageBase *OpenedPage();
    /// Возвращает адрес текущего элемента меню (текущим, как правило, является элемент, кнопка которого была нажата последней
    static Control *CurrentItem();
    /// Закрыть открытый элемент меню
    static void CloseOpenedItem();

    static void SetItemForHint(void *item);

    static void SaveSettings();
    /// Нужно вызывать при отпускании функциональной кнпоки
    static void ReleaseFunctionalButton(Key::E key);
    /// Нажно вызывать при "длинном" нажатии функциональной кнопки
    static void LongFunctionalButton(Key::E key);
    ///\brief  Здесь хранится адрес элемента меню, соответствующего функциональной клавише [1..5], если она находится в нижнем положении, и 0, 
    /// если ни одна кнопка не нажата.
    static Control *itemUnderKey;
    /// Строка подсказки, которую надо выводить в случае включённого режима подсказок.
    static const char *stringForHint;
    /// Item, подсказку для которого нужно выводить в случае включённого режима подсказок.
    static Control *itemHint;

    /// Нарисовать меню
    static void Draw();
    /// С какоей позиции Y рисовать меню. Позиция берётся без учёта заголовка
    static int Y();

private:
    /// Последний открытый контрол на дереве странице page
    static Control *LastOpened(Page *page);
    /// Обработка события таймера автоматического сокрытия меню
    static void OnTimerAutoHide();
    /// Функция, которая отключит вывод строки навигации меню
    static void OnTimerStrNaviAutoHide();
    
    static void ProcessButtonForHint(Key::E button);
    
    static void ResetItemsUnderButton();
    /// Возвращает true, если данная кнопка обрабатыватся в данном режиме
    static bool IsProcessed(const KeyEvent *event);
    /// При нажатии кнопки её имя записывается в эту переменную и хранится там до обратоки события нажатия кнопки.
    static Key::E pressButton;
    /// При отпускании кнопки её имя записывается в эту переменную и хранится там до обработки события отпускания кнопки.
    static Key::E releaseButton;
    /// Эта функция будет вызывана один раз после Menu::Update().
    static pFuncVV funcAterUpdate;
    /// Время последнего нажатия кнопки. Нужно для того, чтобы периодически сохранять настройки
    static uint timeLastPressedButton;
    /// Эта функция будет вызываться каждый кадр
    static pFuncVV funcUpdate;

public:

    class Title
    {
    public:
        static const int HEIGHT = 9;
        static const int WIDTH = 320 / 5 * 2 - 2;
    };

    class Item
    {
    public:
        static const int HEIGHT = 23;

        class Value
        {
        public:
            static const int HEIGHT = 13;
            static const int WIDTH = 320 / 5 - 4; // -V112
        };
    };

    /// Через какое время после последнего нажатия кнопки скрывать меню.
    struct AutoHide
    {
        enum E
        {
            None = 0,   ///< Никогда.
            _5 = 5,   ///< Через 5 секунд.
            _10 = 10,  ///< Через 10 секунд.
            _15 = 15,  ///< Через 15 секунд.
            _30 = 30,  ///< Через 30 секунд.
            _60 = 60   ///< Через 60 секунд.
        } value;
    };
};


/** @}
 */
