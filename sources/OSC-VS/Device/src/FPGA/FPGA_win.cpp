#include "stdafx.h"
#include <math.h>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Заполняет массив синусом
static void FillSine(uint8 *data, uint size);


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FPGA::Init()
{
    DataStorage::Init();
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void FPGA::LoadSettings()
{

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void FPGA::LoadRShift(Chan)
{
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void FPGA::LoadRanges()
{

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void FPGA::ReadData()
{
    Buffer dataA(FPGA_NUM_POINTS);
    Buffer dataB(FPGA_NUM_POINTS);

    FillSine(dataA.Data(), FPGA_NUM_POINTS);
    FillSine(dataB.Data(), FPGA_NUM_POINTS);

    DataSettings ds;
    ds.Fill(dataA.Data(), dataB.Data());

    DataStorage::Push(&ds);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
static void FillSine(uint8 *data, uint size)
{
    float speed = 0.2f;

    for (uint i = 0; i < size; i++)
    {
        data[i] = (uint8)(AVE_VALUE + (MAX_VALUE - AVE_VALUE - 20) * sinf(speed * i));
    }
}